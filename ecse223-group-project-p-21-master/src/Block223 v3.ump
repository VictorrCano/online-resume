namespace ca.mcgill.ecse223.block.model;

use Block223PlayMode.ump;
use Block223Persistence.ump;
use Block223States.ump;

class Block223 {
   1 <@>- * User users;
   1 <@>- * UserRole roles;
   1 <@>- * Game games;
	
		public Game findGame(String name) {
 			Game foundGame = null;
 			for (Game game : this.getGames()) {
 				if (game.getName().equals(name)){
 					foundGame = game;
 					break;
 				}
 			}
 			return foundGame;
 		}
 	
 	 	public User findWithUsername(String username) {
 			User foundUser = null;
 			for (User user : this.getUsers()) {
 				if (user.getUsername().equals(username)) {
 					foundUser = user;
 					break;
 				}
 			}
 		return foundUser;
 		}
 		
 		public User findWithRole(UserRole role) {
 			User foundUser = null;
 			for (User user : this.getUsers()) {
 				for (UserRole urole: user.getRoles()) {
 					if (urole==role){
 					foundUser = user;
 					break;
 					}
 				}
 			}
 		return foundUser;
		}

		public PlayedGame findPlayableGame(int id) {
 			PlayedGame foundGame = null;
 			for (PlayedGame game : this.getPlayedGames()) {
 				if (game.getId()==id){
 					foundGame = game;
 					break;
 				}
 			}
 			return foundGame;
 		}
}

class User {
    before constructor{
   		if (aUsername==null||aUsername.equals("")){
   			throw new RuntimeException("The username must be specified.");
   		}
	}
   unique username;
   1 -> 1..2 UserRole roles;
}

class UserRole {
   abstract;
   password;
   before constructor{
         	if (aPassword==null||aPassword.equals("")){
   				throw new RuntimeException("The password must be specified.");
   		}
   }
}

class Admin {
   isA UserRole;
}

class Player {
   isA UserRole;
}

class Game {
   const Integer MIN_NR_LEVELS = 1;
   const Integer MAX_NR_LEVELS = 99; // this is somewhat redundant because the max multiplicity is enforced by Umple
   const Integer PLAY_AREA_SIDE = 390; // play area is now constant
   const Integer WALL_PADDING = 10;
   const Integer COLUMNS_PADDING = 5;
   const Integer ROW_PADDING = 2;
   unique name;
   Integer nrBlocksPerLevel;
   * -- 1 Admin admin;
   1 <@>- * Block blocks;
   1 <@>- 1..99 Level levels;
   1 <@>- * BlockAssignment blockAssignments;
   1 <@>- 1 Ball ball;
   1 <@>- 1 Paddle paddle;

   before constructor {
   	   if (aName==null || aName.equals("")) {
   		   throw new RuntimeException("The name of a game must be specified.");
   } }
   before constructor {   
   	   if (aNrBlocksPerLevel <= 0){
   			throw new RuntimeException("The number of blocks per level must be greater than zero.");
   } }
		Block findBlock(int id) {
		Block foundBlock = null;
		for (Block B : this.getBlocks()) {
			if (B.getId() == id) {
				foundBlock = B;
				break;
			}
			
		}
		return foundBlock;
		
		}

		Block getRandomBlock(){
			Random rgen = new Random();
			List<Block> blocks=this.getBlocks();
			int index = rgen.nextInt(this.numberOfBlocks());
			return this.getBlock(index);
		}
	
}

class Block {
   const Integer MIN_COLOR = 0;
   const Integer MAX_COLOR = 255;
   const Integer MIN_POINTS = 1;
   const Integer MAX_POINTS = 1000; 
   const Integer SIZE = 20;
   autounique id;
   Integer red;
   Integer green;
   Integer blue;
   Integer points;

  before constructor {
   
    	if (aRed < 0 || aRed > 255)
  			 throw new RuntimeException("Red must be between 0 and 255.");
   	
  
  		 if (aGreen < 0 || aGreen > 255)
  		 	throw new RuntimeException("Green must be between 0 and 255.");
   		
   
  	 	if (aBlue < 0 || aBlue > 255)
   			throw new RuntimeException("Blue must be between 0 and 255.");
   	
   
   		if (aPoints < 1 || aPoints > 1000)
   			throw new RuntimeException("Points must be between 1 and 1000.");
  }

}

// random attribute not needed anymore
// Each level is filled up with random blocks just before playing the level to reach the nrBlocksPerLevel defined in Game
class Level {
	   BlockAssignment findBlockAssignment(int oldHorizontalGridPosition, int oldVerticalGridPosition){
			BlockAssignment foundBA = null;
			for (BlockAssignment BA : this.getBlockAssignments()) {
				if (BA.getGridHorizontalPosition() == oldHorizontalGridPosition&&BA.getGridVerticalPosition()==oldVerticalGridPosition) {
					foundBA = BA;
					break;
				}
			}
			return foundBA;
	   }

}

class BlockAssignment {
   Integer gridHorizontalPosition;
   Integer gridVerticalPosition;
   * -- 1 Level level;
   * -- 1 Block block;
  
	before constructor{
   		if (aGridHorizontalPosition <= 0 || aGridHorizontalPosition > 15){
   			throw new RuntimeException("The horizontal position must be between 1 and 15.");
   		}}
   	before constructor{
   		if (aGridVerticalPosition <= 0 || aGridVerticalPosition > 15){
   			throw new RuntimeException("The vertical position must be between 1 and 15.");
   		}}
}

class Ball {
   const Integer BALL_DIAMETER = 10;
   Integer minBallSpeedX;
   Integer minBallSpeedY;
   Double ballSpeedIncreaseFactor;

	before constructor{
   		if (aMinBallSpeedX <= 0 && aMinBallSpeedY <= 0){
   			throw new RuntimeException("The minimum speed of the ball must be greater than zero.");
   		}
   		if (aBallSpeedIncreaseFactor <= 0){
   			throw new RuntimeException("The speed increase factor of the ball must be greater than zero.");  
		}
   }
   
}

class Paddle {
   const Integer PADDLE_WIDTH = 5;
   const Integer VERTICAL_DISTANCE = 30;
   Integer maxPaddleLength;
   Integer minPaddleLength;
	
	before constructor{
      	if (aMaxPaddleLength <= 0 || aMaxPaddleLength > 390){
   			throw new RuntimeException("The maximum length of the paddle must be greater than zero and less than or equal to 390.");
      	}
      	if (aMinPaddleLength <= 0){
   			throw new RuntimeException("The minimum length of the paddle must be greater than zero.");
      	}
	}

}
